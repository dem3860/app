/**
 * Generated by orval v7.8.0 🍺
 * Do not edit manually.
 * My API
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  CreateEvent201,
  CreateEventBody,
  ErrorMessage,
  ListEvent200,
  ListEventParams,
  ListUsers200,
  ListUsersParams,
  Login200,
  LoginBody,
  UpdateEvent200,
  UpdateEventBody
} from './schemas';

import { customInstance } from '../client';
export const login = (
    loginBody: LoginBody,
 signal?: AbortSignal
) => {
      
      
      return customInstance<Login200>(
      {url: `/auth/login`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: loginBody, signal
    },
      );
    }
  


export const getLoginMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof login>>, TError,{data: LoginBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof login>>, TError,{data: LoginBody}, TContext> => {
    
const mutationKey = ['login'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof login>>, {data: LoginBody}> = (props) => {
          const {data} = props ?? {};

          return  login(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type LoginMutationResult = NonNullable<Awaited<ReturnType<typeof login>>>
    export type LoginMutationBody = LoginBody
    export type LoginMutationError = void

    export const useLogin = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof login>>, TError,{data: LoginBody}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof login>>,
        TError,
        {data: LoginBody},
        TContext
      > => {

      const mutationOptions = getLoginMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const createEvent = (
    createEventBody: CreateEventBody,
 signal?: AbortSignal
) => {
      
      
      return customInstance<CreateEvent201>(
      {url: `/event/create`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createEventBody, signal
    },
      );
    }
  


export const getCreateEventMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createEvent>>, TError,{data: CreateEventBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof createEvent>>, TError,{data: CreateEventBody}, TContext> => {
    
const mutationKey = ['createEvent'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createEvent>>, {data: CreateEventBody}> = (props) => {
          const {data} = props ?? {};

          return  createEvent(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateEventMutationResult = NonNullable<Awaited<ReturnType<typeof createEvent>>>
    export type CreateEventMutationBody = CreateEventBody
    export type CreateEventMutationError = void

    export const useCreateEvent = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createEvent>>, TError,{data: CreateEventBody}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createEvent>>,
        TError,
        {data: CreateEventBody},
        TContext
      > => {

      const mutationOptions = getCreateEventMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const updateEvent = (
    eventId: string,
    updateEventBody: UpdateEventBody,
 ) => {
      
      
      return customInstance<UpdateEvent200>(
      {url: `/event/${eventId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateEventBody
    },
      );
    }
  


export const getUpdateEventMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateEvent>>, TError,{eventId: string;data: UpdateEventBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof updateEvent>>, TError,{eventId: string;data: UpdateEventBody}, TContext> => {
    
const mutationKey = ['updateEvent'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateEvent>>, {eventId: string;data: UpdateEventBody}> = (props) => {
          const {eventId,data} = props ?? {};

          return  updateEvent(eventId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateEventMutationResult = NonNullable<Awaited<ReturnType<typeof updateEvent>>>
    export type UpdateEventMutationBody = UpdateEventBody
    export type UpdateEventMutationError = void

    export const useUpdateEvent = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateEvent>>, TError,{eventId: string;data: UpdateEventBody}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateEvent>>,
        TError,
        {eventId: string;data: UpdateEventBody},
        TContext
      > => {

      const mutationOptions = getUpdateEventMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const deleteEvent = (
    eventId: string,
 ) => {
      
      
      return customInstance<void>(
      {url: `/event/${eventId}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteEventMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEvent>>, TError,{eventId: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteEvent>>, TError,{eventId: string}, TContext> => {
    
const mutationKey = ['deleteEvent'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteEvent>>, {eventId: string}> = (props) => {
          const {eventId} = props ?? {};

          return  deleteEvent(eventId,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteEventMutationResult = NonNullable<Awaited<ReturnType<typeof deleteEvent>>>
    
    export type DeleteEventMutationError = void

    export const useDeleteEvent = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEvent>>, TError,{eventId: string}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteEvent>>,
        TError,
        {eventId: string},
        TContext
      > => {

      const mutationOptions = getDeleteEventMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const listEvent = (
    params?: ListEventParams,
 signal?: AbortSignal
) => {
      
      
      return customInstance<ListEvent200>(
      {url: `/event`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getListEventQueryKey = (params?: ListEventParams,) => {
    return [`/event`, ...(params ? [params]: [])] as const;
    }

    
export const getListEventQueryOptions = <TData = Awaited<ReturnType<typeof listEvent>>, TError = void>(params?: ListEventParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listEvent>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getListEventQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof listEvent>>> = ({ signal }) => listEvent(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof listEvent>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ListEventQueryResult = NonNullable<Awaited<ReturnType<typeof listEvent>>>
export type ListEventQueryError = void


export function useListEvent<TData = Awaited<ReturnType<typeof listEvent>>, TError = void>(
 params: undefined |  ListEventParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof listEvent>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listEvent>>,
          TError,
          Awaited<ReturnType<typeof listEvent>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useListEvent<TData = Awaited<ReturnType<typeof listEvent>>, TError = void>(
 params?: ListEventParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listEvent>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listEvent>>,
          TError,
          Awaited<ReturnType<typeof listEvent>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useListEvent<TData = Awaited<ReturnType<typeof listEvent>>, TError = void>(
 params?: ListEventParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listEvent>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useListEvent<TData = Awaited<ReturnType<typeof listEvent>>, TError = void>(
 params?: ListEventParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listEvent>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getListEventQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const listUsers = (
    params?: ListUsersParams,
 signal?: AbortSignal
) => {
      
      
      return customInstance<ListUsers200>(
      {url: `/admin/user`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getListUsersQueryKey = (params?: ListUsersParams,) => {
    return [`/admin/user`, ...(params ? [params]: [])] as const;
    }

    
export const getListUsersQueryOptions = <TData = Awaited<ReturnType<typeof listUsers>>, TError = ErrorMessage | void>(params?: ListUsersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listUsers>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getListUsersQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof listUsers>>> = ({ signal }) => listUsers(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof listUsers>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ListUsersQueryResult = NonNullable<Awaited<ReturnType<typeof listUsers>>>
export type ListUsersQueryError = ErrorMessage | void


export function useListUsers<TData = Awaited<ReturnType<typeof listUsers>>, TError = ErrorMessage | void>(
 params: undefined |  ListUsersParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof listUsers>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listUsers>>,
          TError,
          Awaited<ReturnType<typeof listUsers>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useListUsers<TData = Awaited<ReturnType<typeof listUsers>>, TError = ErrorMessage | void>(
 params?: ListUsersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listUsers>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listUsers>>,
          TError,
          Awaited<ReturnType<typeof listUsers>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useListUsers<TData = Awaited<ReturnType<typeof listUsers>>, TError = ErrorMessage | void>(
 params?: ListUsersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listUsers>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useListUsers<TData = Awaited<ReturnType<typeof listUsers>>, TError = ErrorMessage | void>(
 params?: ListUsersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listUsers>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getListUsersQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}
